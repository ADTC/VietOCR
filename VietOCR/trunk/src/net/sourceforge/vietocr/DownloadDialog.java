/**
 * Copyright @ 2009 Quan Nguyen
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sourceforge.vietocr;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Properties;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.KeyStroke;

public class DownloadDialog extends javax.swing.JDialog {

    final String url = "http://tesseract-ocr.googlecode.com/files/tesseract-2.00.%1$s.tar.gz";
    private Properties availableCodes;
    private String[] installedCodes;

    /** Creates new form DownloadDialog */
    public DownloadDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        setLocationRelativeTo(getOwner());

        //  Handle escape key to hide the dialog
        KeyStroke escapeKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);
        Action escapeAction =
                new AbstractAction() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        setVisible(false);
                    }
                };
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeKeyStroke, "ESCAPE");
        getRootPane().getActionMap().put("ESCAPE", escapeAction);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        jButtonDownload = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Download Language Data");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(2, 0));
        jPanel1.add(jProgressBar1);

        jButtonDownload.setText("Download");
        jButtonDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownloadActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonDownload);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonClose);

        jPanel1.add(jPanel2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownloadActionPerformed
        if (this.jList1.getSelectedIndex() == -1) {
            return;
        }

        try {
            String key = FindKey(availableCodes, this.jList1.getSelectedValue().toString());
            URL urll = new URL(String.format(url, key));
            File out = loadFile(urll);
            System.out.println(out.getPath());
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButtonDownloadActionPerformed

    public String FindKey(Properties lookup, String value) {
        for (Enumeration e = lookup.keys(); e.hasMoreElements();) {
            String key = (String) e.nextElement();
            if (lookup.get(key).equals(value)) {
                return key;
            }
        }
        return null;
    }

    public File loadFile(URL remoteFile) throws Exception {
        URLConnection connection = remoteFile.openConnection(); //connect to remote file
        InputStream inputStream = connection.getInputStream(); //get stream to read file

        int length = connection.getContentLength(); //find out how long the file is, any good webserver should provide this info
        int current = 0;

//        jProgressBar1.setMaximum(length); //we're going to get this many bytes
//        jProgressBar1.setValue(0); //we've gotten 0 bytes so far

        String tmpdir = System.getProperty("java.io.tmpdir");

        File file = new File(tmpdir, new File(remoteFile.getFile()).getName());
        FileOutputStream fos = new FileOutputStream(file);
        BufferedOutputStream bout = new BufferedOutputStream(fos); //create our output steam to build the file here

        byte[] buffer = new byte[1024];
        int bytesRead = 0;
//
//        while ((bytesRead = inputStream.read(buffer)) != -1) //keep filling the buffer until we get to the end of the file
//        {
//            out.write(buffer, current, bytesRead); //write the buffer to the file offset = current, length = bytesRead
//            current += bytesRead; //we've progressed a little so update current
////            jProgressBar1.setValue(current); //tell progress how far we are
//        }

        while ((bytesRead = inputStream.read(buffer, 0, 1024)) > -1) {
            bout.write(buffer, 0, bytesRead);
        }

        bout.close();
        inputStream.close(); //close our stream
        bout.close();
        return file;
    }

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Object[] available = availableCodes.values().toArray();
        Arrays.sort(available);
        this.jList1.removeAll();
        DefaultListModel model = new DefaultListModel();
        for (Object str : available) {
            model.addElement(str);
        }

        this.jList1.setModel(model);
        this.jList1.setCellRenderer(new CustomCellRenderer(installedCodes));
    }//GEN-LAST:event_formWindowOpened

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                DownloadDialog dialog = new DownloadDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDownload;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * @param availableCodes the availableCodes to set
     */
    public void setAvailableCodes(Properties availableCodes) {
        this.availableCodes = availableCodes;
    }

    /**
     * @param installedCodes the installedCodes to set
     */
    public void setInstalledCodes(String[] installedCodes) {
        this.installedCodes = installedCodes;
    }

    class CustomCellRenderer extends DefaultListCellRenderer {

        Object[] disabledElements;

        CustomCellRenderer(Object[] disabledElements) {
            this.disabledElements = disabledElements;
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            for (Object el : disabledElements) {
                if (value.equals(el)) {
                    Component c = super.getListCellRendererComponent(list, value, index, false, false);
                    c.setEnabled(false);
                    return c;
                }
            }

            return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        }
    }
}
